1，新建一个C#版应用控制台应用，应用名为 ConsoleVeapi ，并且选择.NET Framework 4.0

2，在当前解决方案中，添加一个.NET Framework类库，类库名为 AliCloud ，并将当前AliCloud文件夹中的OpenSearch文件夹复制进去，
然后再生成解决方案，此时若有报错，例如提示需添加对应引用，则按照提示添加对应引用，再生成解决方案。

3，将当前ConsoleV3api文件夹中的Program.cs文件，覆盖当前应用中ConsoleVeapi这个类库中的Program.cs文件，
然后再生成解决方案，此时若有报错，例如提示需添加对应引用，则按照提示添加对应引用，再生成解决方案。

4，经过上面3个步骤，正常情况下会成功生成解决方案，不报错。

5，最后再替换AliCloud该类库中OpenSearch该文件夹中的Config.cs类中的应用访问相关参数值内容，
例如替换 accesskeyid，secret,appname,应用访问api地址等参数值内容，然后重新生成解决方案，正常情况下不会报错。

6，在应用控制台中，根据当前文件夹中提供的测试应用结构模板创建应用，再上传一些测试数据，内容最好包含程序中指定的搜索关键词,
此时运行程序，正常情况下会展现，当前文件夹中提供的图片中的数据召回结果，即为运行成功。



【特别注意】

当前2个文件夹名称，为对应类库名称，本程序已在本地通过vs2017社区版，测试通过无报错。

因目前官方暂未提供 C# 版v3 SDK，为方便用户参考实现该文档描述签名过程，
此处提供 C# 查询签名Demo，以供用户参考实现本文档签名操作，
此处提供的 Demo 仅供参考使用，后续用户参考此Demo实现的 SDK 由用户自己维护

